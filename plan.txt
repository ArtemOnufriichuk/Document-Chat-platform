Приношу свои извинения за недоразумение. Вы абсолютно правы. Давайте создадим правильный план для приложения Google Документов с функцией чата. Вот обновленный план:

Thought for 4 secondsВот обновленный план для приложения Google Документов с функцией чата:

1. Настройка проекта:

```shellscript
npx create-next-app@latest google-docs-chat
```

Выберем следующие опции:

1. TypeScript: Yes
2. ESLint: Yes
3. Tailwind CSS: Yes
4. `src/` directory: No
5. App Router: Yes
6. Import alias: Yes



2. Структура проекта:

```plaintext
google-docs-chat/
├── app/
│   ├── layout.tsx
│   ├── page.tsx
│   ├── documents/
│   │   ├── page.tsx
│   │   └── [id]/
│   │       └── page.tsx
│   └── api/
│       ├── auth/
│       │   └── [...nextauth]/
│       │       └── route.ts
│       └── documents/
│           └── route.ts
├── components/
│   ├── Header.tsx
│   ├── DocumentList.tsx
│   ├── DocumentViewer.tsx
│   └── Chat.tsx
├── lib/
│   ├── auth.ts
│   └── googleDocs.ts
└── types/
    └── index.ts
```


3. Установка зависимостей:

```shellscript
npm install next-auth @auth/google-provider zustand @tanstack/react-query
```


4. Настройка аутентификации (app/api/auth/[...nextauth]/route.ts):

```typescript
import NextAuth from "next-auth"
import GoogleProvider from "@auth/google-provider"

export const authOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      authorization: {
        params: {
          scope: "https://www.googleapis.com/auth/documents https://www.googleapis.com/auth/drive.file"
        }
      }
    })
  ],
  callbacks: {
    async jwt({ token, account }) {
      if (account) {
        token.accessToken = account.access_token
      }
      return token
    },
    async session({ session, token }) {
      session.accessToken = token.accessToken
      return session
    }
  }
}

const handler = NextAuth(authOptions)
export { handler as GET, handler as POST }
```


5. Создание компонентов:

a. components/Header.tsx:

```typescriptreact
import Link from 'next/link'
import { useSession, signIn, signOut } from "next-auth/react"

export default function Header() {
  const { data: session } = useSession()

  return (
    <header className="bg-blue-600 text-white p-4">
      <nav className="container mx-auto flex justify-between items-center">
        <Link href="/" className="text-2xl font-bold">Google Docs Chat</Link>
        <div>
          {session ? (
            <>
              <span className="mr-4">{session.user?.email}</span>
              <button onClick={() => signOut()} className="bg-red-500 px-4 py-2 rounded">Выйти</button>
            </>
          ) : (
            <button onClick={() => signIn("google")} className="bg-green-500 px-4 py-2 rounded">Войти</button>
          )}
        </div>
      </nav>
    </header>
  )
}
```

b. components/DocumentList.tsx:

```typescriptreact
import Link from 'next/link'
import { useQuery } from '@tanstack/react-query'
import { listDocuments } from '@/lib/googleDocs'

export default function DocumentList() {
  const { data: documents, isLoading, error } = useQuery({
    queryKey: ['documents'],
    queryFn: listDocuments
  })

  if (isLoading) return <div>Загрузка...</div>
  if (error) return <div>Ошибка: {error.message}</div>

  return (
    <ul className="space-y-2">
      {documents?.map((doc) => (
        <li key={doc.id} className="border p-2 rounded">
          <Link href={`/documents/${doc.id}`}>{doc.name}</Link>
        </li>
      ))}
    </ul>
  )
}
```

c. components/DocumentViewer.tsx:

```typescriptreact
import { useState, useEffect } from 'react'
import { useQuery, useMutation } from '@tanstack/react-query'
import { getDocument, updateDocument } from '@/lib/googleDocs'

export default function DocumentViewer({ documentId }) {
  const [content, setContent] = useState('')
  const { data: document, isLoading, error } = useQuery({
    queryKey: ['document', documentId],
    queryFn: () => getDocument(documentId)
  })

  const mutation = useMutation({
    mutationFn: updateDocument,
    onSuccess: () => {
      // Обновить кэш или выполнить другие действия после успешного обновления
    }
  })

  useEffect(() => {
    if (document) {
      setContent(document.body.content)
    }
  }, [document])

  const handleContentChange = (e) => {
    setContent(e.target.value)
  }

  const handleSave = () => {
    mutation.mutate({ documentId, content })
  }

  if (isLoading) return <div>Загрузка документа...</div>
  if (error) return <div>Ошибка: {error.message}</div>

  return (
    <div>
      <textarea
        value={content}
        onChange={handleContentChange}
        className="w-full h-64 p-2 border rounded"
      />
      <button onClick={handleSave} className="mt-2 bg-blue-500 text-white px-4 py-2 rounded">
        Сохранить
      </button>
    </div>
  )
}
```

d. components/Chat.tsx:

```typescriptreact
import { useState } from 'react'

export default func...




Техническое задание (ТЗ) для бота
Цель:
Создать Телеграм-бота, который позволяет пользователям искать информацию в загруженных документах и просматривать их список.
Функционал:
1️⃣ /поиск [запрос] – ищет информацию в базе знаний (PDF-документы).
2️⃣ /просмотр – выводит список доступных документов.
3️⃣ Автоматическое распознавание вопросов – бот анализирует запросы и находит ответ в документах.
4️⃣ Мгновенные ответы – минимальная задержка при поиске.
Будущие доработки:
✅ Категории (например, "Бонусы", "Аффилиаты", "Отчеты").
✅ Добавление новых документов в базу без перезапуска.
✅ Логирование запросов, чтобы понимать, что спрашивают чаще всего.


какие именно документы -  только PDF
/поиск - только по тексту
примеры запроса и ответа который ты хочешь получить

пример: За что отвечает настройка в бонусах "строгое распределение" - ну и ответ бота, тип:

Стр 146 Строгое распределение отвечает за кол-во ваозможный ставок с реального и бонусного баланса

token записать в env variables


Функционал основной поменять:
админ закидывает пдф файлы как контекст в базу, дальше юзер выбирает из списка документ и начинается чат, чат берет док парсит читает и отвечает в контексте 

доработки прикрутить чтение гугл таблиц:
"Бонусы" - будет браться из 1 гугл таблицы которую меняет админ по ссылке (хранить в базе в отдельной папке либо парсить док, надо менять таблицу после того как был выдан промо и помечать его как использованный)
"Аффилиаты" - будет браться из 1 гугл таблицы которую меняет админ по ссылке (хранить в базе в отдельной папке либо парсить док, надо менять таблицу после того как был выдан промо и помечать его как использованный)
"Отчеты" - список PDF файлов которые надо выдавать по запросу юзера, 
Добавление новых документов в базу без перезапуска. включено *(Функционал основной поменять)


avoid using google auth just set users like

users: [{ login: "admin" isAdmin: true adminPassword: 12345 }, user:{ login: "user" adminPassword: 12345 }]

also make files be accessable by google doc url not from api

remove all api things, just rework from scratch using data before and conversation before start from start make it simple useful and easy but logically and ux ui usefull
login to google should be real, all app should work as on prod fully working

I dont need Telegram bot I need just web , its web not telegram bot, also I need preview so dont add libriares what can break preview

Develop a fully functional Next.js web application with only Russian language support, designed to seamlessly integrate with Google Docs accessing by link and saving that link for user in local store, also create json doc as db to store all data, it should be as db not prisma, just json and zustand modify this json as db. The application should be production-ready, incorporating all necessary configurations and optimizations for deployment. The core functionality should revolve around interacting with Google Docs accessing by link, raading theme kisting ets, ensuring a robust and reliable user experience. Exclude the chat functionality for this iteration. Focus on creating a stable and efficient application

app style dark and using mostly ui libruary to be simple 

for queries use axios

for state zustand





